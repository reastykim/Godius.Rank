@using Godius.RankSite.Helpers;
@model Godius.Data.Models.Guild
@{
    var currentRankingDate = ViewData["Date"] as DateTime?;
    ViewData["Title"] = $"{Model.Name} 길드 멤버 랭킹 ({currentRankingDate?.ToShortDateString()})";
}

<br />
<ul class="nav nav-tabs">
    <li class="active">
        <a href="#perPosition" data-toggle="tab">직급별</a>
    </li>
    <li>
        <a href="#perRanking" data-toggle="tab">랭킹별</a>
    </li>
</ul>

<div class="tab-content">
    <div class="tab-pane active" id="perPosition">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th style="width:45px">직급</th>
                    <th>아이디</th>
                    <th>랭킹</th>
                </tr>
            </thead>
            <tbody>
                @{
                    var sortedMemberByPositionList = Model.Characters.OrderByDescending(C => C.GuildPosition)
                                                                     .ThenBy(C => C.Name)
                                                                     .ToList();
                    foreach (var member in sortedMemberByPositionList)
                    {
                        var currentRank = member.Ranks.FirstOrDefault(R => R.Date == currentRankingDate);
                        var lastRank = member.Ranks.FirstOrDefault(R => R.Date == currentRankingDate?.AddDays(-7));

                        if (currentRank == null)
                        {
                            continue;
                        }

                        var rankText = "";
                        if (lastRank != null)
                        {
                            if (lastRank.Ranking > currentRank.Ranking)
                            {
                                rankText = $"{currentRank.Ranking} 위 <span class='text-danger' style='font-size:12px'>(<i class='glyphicon glyphicon-arrow-up'></i> {currentRank.Ranking - lastRank.Ranking})</span>";
                            }
                            else if (lastRank.Ranking < currentRank.Ranking)
                            {
                                rankText = $"{currentRank.Ranking} 위 <span class='text-primary' style='font-size:12px'>(<i class='glyphicon glyphicon-arrow-down'></i> {currentRank.Ranking - lastRank.Ranking})</span>";
                            }
                            else
                            {
                                rankText = $"{currentRank.Ranking} 위 <span class='text-primary' style='font-size:12px'>(<i class='glyphicon glyphicon-minus'></i>)</span>";
                            }
                        }
                        else
                        {
                            rankText = $"{currentRank.Ranking} 위 <span class='text-secondary' style='font-size:12px'>(New)</span>";
                        }

                        <tr>
                            <td align="center">@Html.Raw(GuildPositionsToImageConverter.GetPosisionImage(member.GuildPosition.GetValueOrDefault(GuildPositions.Newbie)))</td>
                            <td style="vertical-align:middle"><b>@Html.DisplayFor(model => member.Name)</b></td>

                            <td style="vertical-align:middle">@Html.Raw(rankText)</td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
    <div class="tab-pane" id="perRanking">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th style="width:90px">순위</th>
                    <th style="width:45px">직급</th>
                    <th>아이디</th>
                    <th>랭킹</th>
                </tr>
            </thead>
            <tbody>
                @{
                    var sortedRankList = Model.Characters.Select(C => C.WeeklyRanks.FirstOrDefault(WR => WR.Date == currentRankingDate))
                                                         .Where(WR => WR != null)
                                                         .OrderBy(WR => WR.Ranking)
                                                         .ToList();

                    for (int i = 1; i <= sortedRankList.Count; i++)
                    {
                        var sortedRank = sortedRankList[i - 1];
                        var member = sortedRank.Character;
                        var lastWeeklyRank = member.WeeklyRanks.FirstOrDefault(R => R.Date == currentRankingDate?.AddDays(-7));
                        var currentRank = member.Ranks.FirstOrDefault(R => R.Date == currentRankingDate);
                        var lastRank = member.Ranks.FirstOrDefault(R => R.Date == currentRankingDate?.AddDays(-7));

                        var weeklyRankText = "";
                        if (lastWeeklyRank != null)
                        {
                            if (lastWeeklyRank.Ranking > i)
                            {
                                weeklyRankText = $"{i} <span class='text-danger' style='font-size:12px'>(<i class='glyphicon glyphicon-arrow-up'></i> {i - lastWeeklyRank.Ranking})</span>";
                            }
                            else if (lastWeeklyRank.Ranking < i)
                            {
                                weeklyRankText = $"{i} <span class='text-primary' style='font-size:12px'>(<i class='glyphicon glyphicon-arrow-down'></i> {i - lastWeeklyRank.Ranking})</span>";
                            }
                            else
                            {
                                weeklyRankText = $"{i} <span class='text-secondary' style='font-size:12px'>(<i class='glyphicon glyphicon-minus'></i>)</span>";
                            }
                        }
                        else
                        {
                            weeklyRankText = $"{i} <span class='text-danger' style='font-size:12px'>(New)</span>";
                        }

                        var rankText = "";
                        if (lastRank != null)
                        {
                            if (lastRank.Ranking > currentRank.Ranking)
                            {
                                rankText = $"{currentRank.Ranking} 위 <span class='text-danger' style='font-size:12px'>(<i class='glyphicon glyphicon-arrow-up'></i> {currentRank.Ranking - lastRank.Ranking})</span>";
                            }
                            else if (lastRank.Ranking < currentRank.Ranking)
                            {
                                rankText = $"{currentRank.Ranking} 위 <span class='text-primary' style='font-size:12px'>(<i class='glyphicon glyphicon-arrow-down'></i> {currentRank.Ranking - lastRank.Ranking})</span>";
                            }
                            else
                            {
                                rankText = $"{currentRank.Ranking} 위 <span class='text-primary' style='font-size:12px'>(<i class='glyphicon glyphicon-minus'></i>)</span>";
                            }
                        }
                        else
                        {
                            rankText = $"{currentRank.Ranking} 위 <span class='text-danger' style='font-size:12px'>(New)</span>";
                        }

                        <tr>
                            <td style="vertical-align:middle">
                                @if (i <= 10)
                                {
                                    <b>@Html.Raw(weeklyRankText)</b>
                                }
                                else
                                {
                                    @Html.Raw(weeklyRankText)
                                }
                            </td>
                            <td align="center">@Html.Raw(GuildPositionsToImageConverter.GetPosisionImage(member.GuildPosition.GetValueOrDefault(GuildPositions.Newbie)))</td>
                            <td style="vertical-align:middle"><b>@Html.DisplayFor(model => member.Name)</b></td>

                            <td style="vertical-align:middle">@Html.Raw(rankText)</td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>