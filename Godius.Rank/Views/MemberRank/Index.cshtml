@using Godius.RankSite.Helpers;
@model Godius.Data.Models.Guild
@{
    var currentRankingDate = ViewData["Date"] as DateTime?;
    ViewData["Title"] = $"{Model.Name} 길드원 랭킹 ({currentRankingDate?.ToShortDateString()})";
}

<br />
<ul class="nav nav-tabs" id="categoryTab">
    <li class="active">
        <a href="#perPosition" data-toggle="tab">직급별</a>
    </li>
    <li>
        <a href="#perRanking" data-toggle="tab">랭킹별</a>
    </li>
</ul>

<div class="tab-content">
    <div class="tab-pane active" id="perPosition">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th style="width:45px">직급</th>
                    <th>아이디</th>
                    <th>랭킹</th>
                </tr>
            </thead>
            <tbody>
                @{
                    var sortedMemberByPositionList = Model.Characters.Where(C => C.IsActivated)
                                                                                 .OrderByDescending(C => C.GuildPosition)
                                                                                 .ThenBy(C => C.Name)
                                                                                 .ToList();
                    foreach (var member in sortedMemberByPositionList)
                    {
                        var currentRank = member.Ranks.FirstOrDefault(R => R.Date == currentRankingDate);
                        var lastRank = member.Ranks.FirstOrDefault(R => R.Date == currentRankingDate?.AddDays(-7));

                        if (currentRank == null)
                        {
                            continue;
                        }

                        var rankText = "";
                        if (lastRank != null)
                        {
                            if (lastRank.Ranking > currentRank.Ranking)
                            {
                                rankText = $"{currentRank.Ranking} 위 <a name='rankText' href='#' data-id='{member.Id}'><span class='text-danger' style='font-size: 12px;text-decoration: underline;'> (<i class='glyphicon glyphicon-arrow-up'></i> {Math.Abs(currentRank.Ranking - lastRank.Ranking)})</span></a>";
                            }
                            else if (lastRank.Ranking < currentRank.Ranking)
                            {
                                rankText = $"{currentRank.Ranking} 위 <a name='rankText' href='#' data-id='{member.Id}'><span class='text-primary' style='font-size: 12px;text-decoration: underline;'>(<i class='glyphicon glyphicon-arrow-down'></i> {Math.Abs(currentRank.Ranking - lastRank.Ranking)})</span></a>";
                            }
                            else
                            {
                                rankText = $"{currentRank.Ranking} 위 <a name='rankText' href='#' data-id='{member.Id}'><span class='text-secondary' style='font-size: 12px;text-decoration: underline;'>(<i class='glyphicon glyphicon-minus'></i>)</span></a>";
                            }
                        }
                        else
                        {
                            rankText = $"{currentRank.Ranking} 위 <span class='text-danger' style='font-size: 12px;text-decoration: underline;'>(New)</span>";
                        }

                        <tr>
                            <td align="center">@Html.Raw(GuildPositionsToImageConverter.GetPosisionImage(member.GuildPosition.GetValueOrDefault(GuildPositions.Newbie)))</td>
                            <td style="vertical-align:middle"><b>@Html.DisplayFor(model => member.Name)</b></td>

                            <td style="vertical-align:middle">@Html.Raw(rankText)</td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
    <div class="tab-pane" id="perRanking">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th style="width:80px">순위</th>
                    <th style="width:45px">직급</th>
                    <th>아이디</th>
                    <th>랭킹</th>
                </tr>
            </thead>
            <tbody>
                @{
                    var sortedRankList = Model.WeeklyRanks.Where(WR => WR.Date == currentRankingDate)
                                                          .OrderBy(WR => WR.Ranking)
                                                          .ToList();

                    var lastWeeklyRankList = Model.WeeklyRanks.Where(WR => WR.Date == currentRankingDate?.AddDays(-7));

                    for (int i = 1; i <= sortedRankList.Count; i++)
                    {
                        var sortedRank = sortedRankList[i - 1];
                        var member = sortedRank.Character;
                        var lastWeeklyRank = lastWeeklyRankList.FirstOrDefault(WR => WR.CharacterId == member.Id);

                        var currentRank = member.Ranks.FirstOrDefault(R => R.Date == currentRankingDate);
                        var lastRank = member.Ranks.FirstOrDefault(R => R.Date == currentRankingDate?.AddDays(-7));

                        var weeklyRankText = "";
                        if (lastWeeklyRank != null)
                        {
                            if (lastWeeklyRank.Ranking > i)
                            {
                                weeklyRankText = $"{i} <span class='text-danger' style='font-size:12px'>(<i class='glyphicon glyphicon-arrow-up'></i> {Math.Abs(i - lastWeeklyRank.Ranking)})</span>";
                            }
                            else if (lastWeeklyRank.Ranking < i)
                            {
                                weeklyRankText = $"{i} <span class='text-primary' style='font-size:12px'>(<i class='glyphicon glyphicon-arrow-down'></i> {Math.Abs(i - lastWeeklyRank.Ranking)})</span>";
                            }
                            else
                            {
                                weeklyRankText = $"{i} <span class='text-secondary' style='font-size:12px'>(<i class='glyphicon glyphicon-minus'></i>)</span>";
                            }
                        }
                        else
                        {
                            weeklyRankText = $"{i} <span class='text-danger' style='font-size:12px'>(New)</span>";
                        }

                        var rankText = "";
                        if (lastRank != null)
                        {
                            if (lastRank.Ranking > currentRank.Ranking)
                            {
                                rankText = $"{currentRank.Ranking} 위 <span class='text-danger' style='font-size:12px'>(<i class='glyphicon glyphicon-arrow-up'></i> {Math.Abs(currentRank.Ranking - lastRank.Ranking)})</span>";
                            }
                            else if (lastRank.Ranking < currentRank.Ranking)
                            {
                                rankText = $"{currentRank.Ranking} 위 <span class='text-primary' style='font-size:12px'>(<i class='glyphicon glyphicon-arrow-down'></i> {Math.Abs(currentRank.Ranking - lastRank.Ranking)})</span>";
                            }
                            else
                            {
                                rankText = $"{currentRank.Ranking} 위 <span class='text-secondary' style='font-size:12px'>(<i class='glyphicon glyphicon-minus'></i>)</span>";
                            }
                        }
                        else
                        {
                            rankText = $"{currentRank.Ranking} 위 <span class='text-danger' style='font-size:12px'>(New)</span>";
                        }

                        <tr>
                            <td style="vertical-align:middle">
                                @if (i <= 10)
                                {
                                    <b>@Html.Raw(weeklyRankText)</b>
                                }
                                else
                                {
                                    @Html.Raw(weeklyRankText)
                                }
                            </td>
                            <td align="center">@Html.Raw(GuildPositionsToImageConverter.GetPosisionImage(member.GuildPosition.GetValueOrDefault(GuildPositions.Newbie)))</td>
                            <td style="vertical-align:middle"><b>@Html.DisplayFor(model => member.Name)</b></td>

                            <td style="vertical-align:middle">@Html.Raw(rankText)</td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="rankModal" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title"></h4>
            </div>
            <div class="modal-body">
                <p>Some text in the modal.</p>
            </div>
        </div>

    </div>
</div>

@section Scripts {

    <script type="text/javascript">
        $(document).ready(function () {
            $('a[data-toggle="tab"]').on('show.bs.tab', function (e) {
                localStorage.setItem('activeTab', $(e.target).attr('href'));
            });
            var activeTab = localStorage.getItem('activeTab');
            if (activeTab) {
                $('#categoryTab a[href="' + activeTab + '"]').tab('show');
            }

            $('a[name="rankText"]').each(function () {
                $(this).on('click', function () {
                    var characterId = $(this).attr('data-id');

                    $.ajax({
                        type: 'GET',
                        url: '/MemberRank/GetAllRanks',
                        data: { 'characterId': characterId },
                        dataType: 'json',
                        success: function (data) {
                            console.log(data);
                            //var str = '';
                            //for (var name in data) {
                            //    str += '<li>' + data[name] + '</li>';
                            //}
                            //$('#timezones').html('<ul>' + str + '</ul>');


                            $('h4.modal-title').text(data.name);
                            $('div.modal-body').html();
                            $('#rankModal').modal();
                        }
                    });
                });
            });
        });
    </script>
}